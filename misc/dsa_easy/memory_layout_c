A typical memory representation of C program consists of following sections.

1. Text segment
2. Initialized data segment
3. Uninitialized data segment
4. Stack
5. Heap


static data members do not contribute in size of an object. So ‘i’ is not considered in size of Test. Also, all functions (static and non-static both) do not contribute in size.


In case of Multiple Inheritance, constructors of base classes are always called in derivation order from left to right and Destructors are called in reverse order.

note:- multiple inheritance is not supported in java


conversion character:-



in C++, if a class has a constructor which can be called with a single argument, then this constructor becomes conversion constructor because such a constructor allows automatic conversion to the class being constructed.

#include<iostream>
 
using namespace std;
class Test 
{
 private:
   int x;
 public:
   Test(int i) {x = i;}
   void show() { cout<<" x = "<<x<<endl; }
};
 
int main()
{
 Test t(20);
 t.show();
 t = 30; // conversion constructor is called here.
 t.show();
 getchar();
 return 0;
}
The above program prints:
x = 20
x = 30

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above



