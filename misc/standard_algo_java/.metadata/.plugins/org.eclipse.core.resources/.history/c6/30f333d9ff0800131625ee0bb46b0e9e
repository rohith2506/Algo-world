package jp.co.wap.exam;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

public class PersistentQueue<E> {
		private List<E> front;
		private List<E> back; 
	
		public PersistentQueue() {
			// modify this constructor if necessary, but do not remove default constructor
			front = new ArrayList<E>();
			back  = new ArrayList<E>();
		}
		
		private PersistentQueue(List<E> front) {
			// modify or remove this constructor if necessary
			this.front = front;
		}
		
		// add other constructors if necessary

		public <T> PersistentQueue<E> enqueue(E e) {
			if (e == null) {
				throw new IllegalArgumentException();
				}
			
			List<E> front1 = new ArrayList<E>(back);
			front1.add(e);
			
			back.add(e);
	   	
			for(int j=0;j<front1.size();j++)
				System.out.print(front1.get(j)+" ");
				System.out.println();
				
		    return new PersistentQueue<E>(front1);
		}
		
		
		public PersistentQueue<E> dequeue() {

			if (back.isEmpty()) {
				throw new NoSuchElementException();
			}
			
			List<E> clone = new ArrayList<E>(back);
			
			clone.remove(0);
			back.remove(0);			
			
			for(int j=0;j<clone.size();j++)
				System.out.print(clone.get(j)+" ");
				System.out.println();
			
			return new PersistentQueue<E>(clone);
		}

		public E peek() {
			// modify this method if needed
			if (back.isEmpty()) {
				throw new NoSuchElementException();
			}
			return back.get(0);
		}

		public int size() {
			return back.size();
		}
		
		public static void main(String[] args){
			PersistentQueue<Integer> p = new PersistentQueue<Integer>();
			
			for(int i=1;i<=10;i++){
				 p.enqueue(i+1);
			}
			
		for(int i=1;i<5;i++)
			p.dequeue();	
		
		System.out.println(p.size());
		System.out.println(p.peek());
		
		}
	}
