package jp.co.wap.exam;
import java.util.Arrays;
import java.util.List;
import jp.co.wap.exam.lib.Interval;

public class Problem1 {

	public static void testProblem1(){

	Interval interval1 = new Interval("08:00", "12:00");
	Interval interval2 = new Interval("06:00", "09:00");
	Interval interval3 = new Interval("11:00", "13:30");
	List<Interval> figure1 = Arrays.asList(interval1, interval2, interval3);
	System.out.println(getMaxIntervalOverlapCount(figure1));
	// example: Figure 2

	List<Interval> figure2 = Arrays.asList(new Interval("09:00", "12:30"),
	new Interval("06:00", "09:30"), new Interval("12:00", "14:30"),
	new Interval("10:00", "10:30"), new Interval("11:00", "13:30"));
	System.out.println(getMaxIntervalOverlapCount(figure2));
	}
			
public static int getMaxIntervalOverlapCount(List<Interval> intervals) {
	
	int n = intervals.size();
	int minstart = 100000;
	
	for(int i=0;i<n;i++){
		int sthr = intervals.get(i).getBeginHour();
		int stmin = intervals.get(i).getBeginMinute();
		
		if( (sthr*60 + stmin) < minstart ){
			minstart = (sthr*60) + stmin;
		}	
	}
	
	int maxend = 0;
	
	for(int i=0;i<n;i++){
		int endhr = intervals.get(i).getEndHour();
		int endmin = intervals.get(i).getEndMinute();
		
		if( ((endhr * 60) + endmin) > maxend){
			maxend = (endhr * 60) + endmin;
		}
	}
	
	//System.out.println(minstart+" "+maxend);

	//try to find the samllest range it can be accessed
	
	int buff[] = new int[maxend-minstart+1];
	
	for(int i=0;i<buff.length;i++)
		buff[i]=0;
	
	for(int i=0;i<intervals.size();i++){
		int sthr = intervals.get(i).getBeginHour();
		int stmin = intervals.get(i).getBeginMinute();
		
		int endhr = intervals.get(i).getEndHour();
		int endmin = intervals.get(i).getEndMinute();
		
		int start = (sthr * 60) + stmin;
		int end   = (endhr * 60) + endmin;
		
		start = start - minstart;
		end   = end   - minstart;
		
		for(int j = start ; j<=end; j++)
			buff[j]++;
	}

	int res  = 0;
	for(int i=0;i<buff.length;i++){
		if(buff[i] > res)
			res = buff[i];
	}

	return res;
	}

public static void main(String[] args){
	testProblem1();
	}
}
