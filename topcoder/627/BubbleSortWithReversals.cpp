/*
Dynamic programming
Editorial SRM 627
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BubbleSortWithReversals {
public:

int countInversions(const vector<int> &B, int x)
{
    /* Count the number of inversions in B, contributed by indexes >= x */
    int c = 0;
    for (int i = x; i < B.size(); i++) {
        for (int j = 0; j < i; j++) {
            if (B[j] > B[i]) {
                c++;
            }
        }
    }
    return c;
}
 
int getMinSwaps(vector<int> A, int K)
{
     
    int F[51][51];
    int n = A.size();
     
    // Initialize the base case:
    for (int k = 0; k <= K; k++) {
        F[n - 1][k] = 0;
    }
     
    for (int x = n-1; x >= 0; x--) {
        for (int k = 0; k <= K; k++) {
            // Case 1: Do not reverse A[x]:
            // Make B containing the first x+1 elements of A:
            vector<int> B( A.begin(), A.begin() + x + 1 );
            F[x][k] = countInversions(B, x) + F[x+1][k];
             
            // Case 2: Reverse something
            if (k >= 1) {
                for (int y = x + 1; y < n; y++) {
                    // Make B, containing:
                    // * The first x elements of A
                    // * The remaining y - x + 1 elements of A, but reversed
                    vector<int> B( A.begin(), A.begin() + y + 1 );
                    reverse(B.begin() + x, B.begin() + y + 1);
                    F[x][k] = std::min(F[x][k], countInversions(B, x) + F[y+1][k - 1] );
                }
            }
        }
         
    }
     
    return F[0][K];
}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BubbleSortWithReversals *obj;
	int answer;
	obj = new BubbleSortWithReversals();
	clock_t startTime = clock();
	answer = obj->getMinSwaps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {6,8,8,7,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {7,2,2,13,5,5,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {12,5,1,10,12,6,6,10,6,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {482,619,619,601,660,660,691,691,77,77,96,77};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = 22;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
