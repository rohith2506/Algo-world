#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>


using namespace std;


class TwoWaysSorting {
public:
	string sortingMethod(vector <string> stringList) {

		vector<string> v1;
		vector<int> v2;

		v1 = stringList;

		for(int i=0;i<stringList.size();i++)
			v2.push_back(stringList[i].length());

		sort(v1.begin(),v1.end());

		int flag1 = 0, flag2 = 1;

		if(v1 == stringList)
			flag1 = 1;

		for(int i=0;i<v2.size();i++){
			for(int j=i+1;j<v2.size();j++){
				if(v2[i] > v2[j]){
					flag2 = 0;
					break;
				}
			}
		}

		if(flag1 == 1 && flag2 == 0)
			return "lexicographically";
		else if(flag1 == 0 && flag2 == 1)
			return "lengths";
		else if(flag1 == 1 && flag2 == 1)
			return "both";
		else
			return "none";	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TwoWaysSorting *obj;
	string answer;
	obj = new TwoWaysSorting();
	clock_t startTime = clock();
	answer = obj->sortingMethod(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"a","aa","bbb"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "both";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"c","bb","aaa"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "lengths";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"etdfgfh","aio"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "none";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"aaa","z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "lexicographically";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "both";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"abcdef","bcdef","cdef","def","ef","f","topcoder"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "lexicographically";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
