/*
Discrete math,dp(medium)
620 match editorial
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string.h>
#include <cmath>
#include <cstdlib>
#include <ctime>



using namespace std;


class RandomGraph {
public:

bool solved[51][26][18];
double dp[51][26][18];
double p;

double f(int r, int a, int b, int c)
{
    if (! solved[a][b][c]) {
        double res = 0.0;
        if (r == 0) {
            // base case
            res =  1.00;
        } else {
            solved[a][b][c] = true;
            int bad;
            res = 0.00;
             
            // 1. Make an isolated one  o
            bad = a + 2*b + 3*c;
            res += pow(1.0 - p, bad) * f(r-1, a+1, b, c);
             
            // 2. Take a previous isolated node, turn into a couple o--o
            if (a > 0) {
                bad = 2*b + 3*c;
                res += pow(1.0 - p,bad) * a * p * pow(1.0 - p, a - 1) * f(r-1, a-1, b+1, c);
            }
             
            // 3. Take two previous isolated nodes and merge them.
            if (a > 1) {
                bad = 2*b + 3*c;
                res += pow(1.0 - p,bad) * (a*(a-1)/2) * (p*p) * pow(1.0 - p,a - 2) * f(r-1, a-2, b, c+1);
            }
             
            if (b > 0) {
                // 4. Take a previous couple, turn into line: o--o
                //                                             \
                //                                              o   
                bad = a + 3*c;
                res += pow(1.0 - p,bad) * (2*b) * p * pow(1.0 - p,2*b - 1) * f(r-1, a, b-1, c+1); 
             
                // 5. Take a previous couple, turn into triangle o---o
                //                                                \ /
                //                                                 o
                res += pow(1.0 - p,bad) * b * (p*p) * pow(1.0 - p,2*b - 2) * f(r-1, a, b-1, c+1);
            }
        }
        dp[a][b][c] = res;
    }
    return dp[a][b][c];
}

double probability(int n, int p) {
   	this->p = p / 1000.00;
    memset(solved, 0, sizeof(solved)); 
    return 1.0 - f(n, 0,0,0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	RandomGraph *obj;
	double answer;
	obj = new RandomGraph();
	clock_t startTime = clock();
	answer = obj->probability(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 7;
	p1 = 0;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 620;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 500;
	p2 = 0.59375;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 100;
	p2 = 0.33566851611343496;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 15;
	p1 = 50;
	p2 = 0.5686761670525845;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 10;
	p2 = 0.7494276522159893;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 50;
	p1 = 1000;
	p2 = 1.0;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
