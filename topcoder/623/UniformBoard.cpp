/*
from http://www.vexorian.com/2014/06/srm-623-saved-by-challenge-phase.html
div 1 250 and div2 1000 are almost same.
this won't work in c++ 4.3.2. u need c++ 4.11
Category:- Simple Math, DP
@Author: Rohit
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class UniformBoard {
public:
	int getBoard(vector <string> board, int K) {
		int W = board.size(); 
		int H = board[0].size();
		map< char, vector<vector<int> > > total; 
		string chars = ".AP";
		int res;
		for(char ch: chars){
			vector<vector<int> > t(W+1,vector<int>(H+1,0));
			for(int i=1;i<=W;i++){
				for(int j=1;j<=H;j++){
					int x == (board[i][j] == ch);
					t[i][j] = x + t[i-1][j] + t[i][j-1] - t[i-1][j-1];
				}
			}
			total[ch] = t;
		}

		auto rectangle = [&](char ch, int x0, int x1, int y0, int y1){
			auto &t = total[ch];
			return t[x1][y1] - t[x0][y1] - t[x1][y0]  + t[x0][y0];
		};

		int A = rectangle('A',0,W,0,H);
		int E = rectangle('.',0,W,0,H);

		for(int x0 = 0; x0 < W; x0++){
			for(int x1 = x0+1; x1 < W; x1++){
				for(int y0 = 0; y0 < H; y0++){
					for(int y1 = y0+1; y1 < H; y1++){
						int e = rectangle('.',x0,x1,y0,y1);
						int a = rectangle('A',x0,x1,y0,y1);
						int p = rectangle('P',x0,x1,y0,y1);
						int na = A - a;
						int ne = E - e;
						if(e <= na){
							int x = e;
							int mov = x;
							na = na - x;
							a = a + x;
							e = 0;
							ne = ne + x;
							if(mov <= K){
								if(p == 0){
									res = std::max(res,a);
								}
								else if( (p <= na) && (ne >= 1) && (mov + 2*p <= K)){
									res = std::max(res, a+p);
								}
							}
						}
					}
				}
			}
		}
		return res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	UniformBoard *obj;
	int answer;
	obj = new UniformBoard();
	clock_t startTime = clock();
	answer = obj->getBoard(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"AP",".A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"AP",".A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"PPP","APA","A.P"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAA","PPP","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"PPAAPA..AP","PPA.APAP..","..P.AA.PPP","P.P..APAA.","P.P..P.APA","PPA..AP.AA","APP..AAPAA","P.P.AP...P",".P.A.PAPPA","..PAPAP..P"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 15;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
